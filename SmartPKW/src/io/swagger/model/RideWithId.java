/*
 * SmartPKW
 * Die SmartPKW API ermöglicht die Organisation von Fahrgemeinschaften.  - Benutzerverwaltung - Planung von Rides   - Ein Ride enthält eine von Google Routes generiete Route, welche alle Haltepunkte des Rides enthält.   - Ein Ride enthält mindestens den Haltepunkt \"Start\" und \"Ziel\".   - Jeder Haltepunkt ist an einen Zeitraum gebunden. Der Zeitraum berechnet sich von Google Maps Distance Matrix in Abhängigkeit des geplanten Fahrbeginns.   - Benutzer können Rides teilnehmen, indem sie ...        - ... zwei Haltepunkte vorschlagen. Dieser Vorschlag kann vom Ride-Ersteller angenommen oder angelehnt werden. Beim Ablehnen kann eine Nachricht hinzugefügt werden und es kann ein anderer Vorschlag für den Ein- und/oder Ausstiegspunkt gesendet werden.       - ... einen Haltepunkt vorschlagen. Neben diesem Vorschlag wird einer vorhandenen Haltepunkte zum Ein- bzw. Aussteigen des Mitfahrers verwendet.       - ... an zwei bestehenden Haltepunkten (zum Ein- und Aussteigen) teilnehmen.   - Automatisches Ablehnen der vorgeschlagengen Haltepunkten, wenn der Fahrer den ersten dieser Haltepunkte passiert hat.   - Nach der Teilnahme an einem kann jeder jeden bewerten.   - Bewertungsuntergrenze    
 *
 * OpenAPI spec version: 1.0.0
 * Contact: henning.westervelt@hof-university.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Date;
import javax.validation.constraints.*;

/**
 * RideWithId
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2019-01-09T18:17:56.749Z")
public class RideWithId   {
  @JsonProperty("rideId")
  private Integer rideId = null;

  @JsonProperty("createdByUserById")
  private String createdByUserById = null;

  @JsonProperty("createdOn")
  private Date createdOn = null;

  @JsonProperty("description")
  private String description = null;

  /**
   * status phase of a ride
   */
  public enum StatusEnum {
    PLANNING("planning"),
    
    RIDING("riding"),
    
    FINISHED("finished");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("status")
  private StatusEnum status = null;

  @JsonProperty("carById")
  private Integer carById = null;

  public RideWithId rideId(Integer rideId) {
    this.rideId = rideId;
    return this;
  }

  /**
   * Get rideId
   * @return rideId
   **/
  @JsonProperty("rideId")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public Integer getRideId() {
    return rideId;
  }

  public void setRideId(Integer rideId) {
    this.rideId = rideId;
  }

  public RideWithId createdByUserById(String createdByUserById) {
    this.createdByUserById = createdByUserById;
    return this;
  }

  /**
   * Get createdByUserById
   * @return createdByUserById
   **/
  @JsonProperty("createdByUserById")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public String getCreatedByUserById() {
    return createdByUserById;
  }

  public void setCreatedByUserById(String createdByUserById) {
    this.createdByUserById = createdByUserById;
  }

  public RideWithId createdOn(Date createdOn) {
    this.createdOn = createdOn;
    return this;
  }

  /**
   * Get createdOn
   * @return createdOn
   **/
  @JsonProperty("createdOn")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public Date getCreatedOn() {
    return createdOn;
  }

  public void setCreatedOn(Date createdOn) {
    this.createdOn = createdOn;
  }

  public RideWithId description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   **/
  @JsonProperty("description")
  @ApiModelProperty(value = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public RideWithId status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * status phase of a ride
   * @return status
   **/
  @JsonProperty("status")
  @ApiModelProperty(required = true, value = "status phase of a ride")
  @NotNull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public RideWithId carById(Integer carById) {
    this.carById = carById;
    return this;
  }

  /**
   * Get carById
   * @return carById
   **/
  @JsonProperty("carById")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public Integer getCarById() {
    return carById;
  }

  public void setCarById(Integer carById) {
    this.carById = carById;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RideWithId rideWithId = (RideWithId) o;
    return Objects.equals(this.rideId, rideWithId.rideId) &&
        Objects.equals(this.createdByUserById, rideWithId.createdByUserById) &&
        Objects.equals(this.createdOn, rideWithId.createdOn) &&
        Objects.equals(this.description, rideWithId.description) &&
        Objects.equals(this.status, rideWithId.status) &&
        Objects.equals(this.carById, rideWithId.carById);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rideId, createdByUserById, createdOn, description, status, carById);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RideWithId {\n");
    
    sb.append("    rideId: ").append(toIndentedString(rideId)).append("\n");
    sb.append("    createdByUserById: ").append(toIndentedString(createdByUserById)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    carById: ").append(toIndentedString(carById)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

