/*
 * SmartPKW
 * Die SmartPKW API ermöglicht die Organisation von Fahrgemeinschaften.  - Benutzerverwaltung - Planung von Rides   - Ein Ride enthält eine von Google Routes generiete Route, welche alle Haltepunkte des Rides enthält.   - Ein Ride enthält mindestens den Haltepunkt \"Start\" und \"Ziel\".   - Jeder Haltepunkt ist an einen Zeitraum gebunden. Der Zeitraum berechnet sich von Google Maps Distance Matrix in Abhängigkeit des geplanten Fahrbeginns.   - Benutzer können Rides teilnehmen, indem sie ...        - ... zwei Haltepunkte vorschlagen. Dieser Vorschlag kann vom Ride-Ersteller angenommen oder angelehnt werden. Beim Ablehnen kann eine Nachricht hinzugefügt werden und es kann ein anderer Vorschlag für den Ein- und/oder Ausstiegspunkt gesendet werden.       - ... einen Haltepunkt vorschlagen. Neben diesem Vorschlag wird einer vorhandenen Haltepunkte zum Ein- bzw. Aussteigen des Mitfahrers verwendet.       - ... an zwei bestehenden Haltepunkten (zum Ein- und Aussteigen) teilnehmen.   - Automatisches Ablehnen der vorgeschlagengen Haltepunkten, wenn der Fahrer den ersten dieser Haltepunkte passiert hat.   - Nach der Teilnahme an einem kann jeder jeden bewerten.   - Bewertungsuntergrenze    
 *
 * OpenAPI spec version: 1.0.0
 * Contact: henning.westervelt@hof-university.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;

/**
 * UserWithId
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2019-01-05T15:11:31.517Z")
public class UserWithId   {
  @JsonProperty("userId")
  private Long userId = null;

  @JsonProperty("userName")
  private String userName = null;

  public UserWithId userId(Long userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   **/
  @JsonProperty("userId")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public Long getUserId() {
    return userId;
  }

  public void setUserId(Long userId) {
    this.userId = userId;
  }

  public UserWithId userName(String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * Get userName
   * @return userName
   **/
  @JsonProperty("userName")
  @ApiModelProperty(value = "")
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserWithId userWithId = (UserWithId) o;
    return Objects.equals(this.userId, userWithId.userId) &&
        Objects.equals(this.userName, userWithId.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, userName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserWithId {\n");
    
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

